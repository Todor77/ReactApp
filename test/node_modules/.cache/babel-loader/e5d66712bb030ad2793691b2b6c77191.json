{"ast":null,"code":"var _jsxFileName = \"/home/todorilievski/Projects/avtodemo(reactWork)/test/src/index.js\";\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport initStore from 'config/store';\nimport { setupAxiosInterceptors } from 'rest/axios';\nimport DevTools from 'config/devtools';\nimport { redirectToLoginWithMessage, logout } from 'reducers/authentication';\nimport { browserHistory } from 'react-router';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { Router } from 'react-router';\nimport getRoutes from 'router/router';\nimport { registerLocales } from 'config/translation';\nconst devTools = process.env.NODE_ENV === 'development' ? React.createElement(DevTools, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}) : null;\nconst store = initStore();\nconst history = syncHistoryWithStore(browserHistory, store);\nregisterLocales(store);\nconst actions = bindActionCreators({\n  redirectToLoginWithMessage,\n  logout\n}, store.dispatch);\nsetupAxiosInterceptors(() => actions.redirectToLoginWithMessage('login.error.unauthorized'));\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, devTools, React.createElement(Router, {\n  history: history,\n  routes: getRoutes(actions.logout),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}))), document.getElementById('root'));","map":{"version":3,"sources":["/home/todorilievski/Projects/avtodemo(reactWork)/test/src/index.js"],"names":["ReactDOM","React","Provider","bindActionCreators","initStore","setupAxiosInterceptors","DevTools","redirectToLoginWithMessage","logout","browserHistory","syncHistoryWithStore","Router","getRoutes","registerLocales","devTools","process","env","NODE_ENV","store","history","actions","dispatch","render","document","getElementById"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,sBAAT,QAAuC,YAAvC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,0BAAT,EAAqCC,MAArC,QAAmD,yBAAnD;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,oBAAT,QAAqC,oBAArC;AAEA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAzC,GAAwD,IAAzE;AAEA,MAAMC,KAAK,GAAGd,SAAS,EAAvB;AACA,MAAMe,OAAO,GAAGT,oBAAoB,CAACD,cAAD,EAAiBS,KAAjB,CAApC;AACAL,eAAe,CAACK,KAAD,CAAf;AAEA,MAAME,OAAO,GAAGjB,kBAAkB,CAAC;AAACI,EAAAA,0BAAD;AAA6BC,EAAAA;AAA7B,CAAD,EAAuCU,KAAK,CAACG,QAA7C,CAAlC;AACAhB,sBAAsB,CAAC,MAAMe,OAAO,CAACb,0BAAR,CAAmC,0BAAnC,CAAP,CAAtB;AAEAP,QAAQ,CAACsB,MAAT,CACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGJ,QADH,EAEE,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAEK,OAAjB;AAA0B,EAAA,MAAM,EAAEP,SAAS,CAACQ,OAAO,CAACZ,MAAT,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CADF,CADF,EAOEe,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF","sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport initStore from 'config/store';\nimport { setupAxiosInterceptors } from 'rest/axios';\nimport DevTools from 'config/devtools';\nimport { redirectToLoginWithMessage, logout } from 'reducers/authentication';\nimport { browserHistory } from 'react-router'\nimport { syncHistoryWithStore } from 'react-router-redux'\n\nimport { Router } from 'react-router';\nimport getRoutes from 'router/router';\nimport { registerLocales } from 'config/translation';\n\nconst devTools = process.env.NODE_ENV === 'development' ? <DevTools /> : null;\n\nconst store = initStore();\nconst history = syncHistoryWithStore(browserHistory, store);\nregisterLocales(store);\n\nconst actions = bindActionCreators({redirectToLoginWithMessage, logout}, store.dispatch);\nsetupAxiosInterceptors(() => actions.redirectToLoginWithMessage('login.error.unauthorized'));\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      {devTools}\n      <Router history={history} routes={getRoutes(actions.logout)}/>\n    </div>\n  </Provider>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}